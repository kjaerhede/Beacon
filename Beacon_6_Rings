#include <FastLED.h>
#include <WiFi.h>

#define LED_TYPE WS2812B
#define COLOR_ORDER GRB
#define NUM_LEDS 100
#define DATA_PIN 21
#define BRIGHTNESS 25

int speed = 200;
int NUM_RUN = 12;
int NUM_SOL = NUM_RUN;
int offset = NUM_RUN*4;
int NUM_RINGS = 6;
volatile int S = 0;

const char* ssid     = "ELF";
const char* password = "Happyelf";

WiFiServer server(80);

CRGB leds[NUM_LEDS];


void setup() {
  
  Serial.begin(115200);
  FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS);
  Clearall();
  Wifisetup();
 
  }

void loop() {

   Wifi();

}

void RunningLights(){

  while (S = 1) {
  for (int dot1 = 0; dot1 < NUM_RUN; dot1++) {
    for (int iteration = 0; iteration < NUM_RINGS; iteration++) {
      int led_num = dot1 + NUM_RUN * iteration;
      leds[NUM_SOL + led_num] = CRGB::White;
    }
    
    FastLED.show();
    
    delay(speed);
    
     for (int iteration = 0; iteration < NUM_RINGS; iteration++) {
      int led_num = dot1 + NUM_RUN * iteration;
      leds[NUM_RUN + led_num ] = CRGB::Gray;
    }
    
    for (int iteration = 0; iteration < NUM_RINGS; iteration++) {
      int led_num = dot1 + NUM_RUN * iteration;
      if(dot1 > 0) leds[NUM_RUN + led_num - 1] = CRGB::Black;
      else if(dot1 + iteration == 0) leds[NUM_RUN + NUM_RUN * NUM_RINGS - 1] = CRGB::Black;
      else leds[NUM_RUN + led_num - 1] = CRGB::Black;
    }
  }
}
}


void SolidLights(){

  fill_solid( &(leds[0]),             NUM_SOL, CRGB(64, 0, 0));
  fill_solid( &(leds[0+NUM_SOL*NUM_RINGS+NUM_SOL]),    NUM_SOL, CRGB(64, 0, 0));
  FastLED.show();
  
}

void Wifisetup(){ 

    delay(10);   // We start by connecting to a WiFi network

    Serial.println();
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);

    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    
    server.begin();

}

void Clearall(){

  fill_solid( &(leds[0]), NUM_LEDS, CRGB(0, 0, 0));
  FastLED.show();

}

void Wifi(){

 WiFiClient client = server.available();   // listen for incoming clients

  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/B\">here</a> to Turn Beacon on.<br>");
            client.print("Click <a href=\"/S\">here</a> to Turn SolidLights on.<br>");
            client.print("Click <a href=\"/O\">here</a> to Turn the Beacon OFF.<br>");

            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }

              // Check to see if the client request was "GET /H" or "GET /L":
          if (currentLine.endsWith("GET /B")) { int S = 1;
          
          int run_light = 1
          // SolidLights(); 
          // delay(10);
          // RunningLights();     
          
        }
        
         if (currentLine.endsWith("GET /S")) {
          // SolidLights(); 

         }  
                     
         if (currentLine.endsWith("GET /O")) {int volatile S = 0;
          // Clearall(); 
      }
    }
    // close the connection:
    //client.stop();
    //Serial.println("Client Disconnected.");
    RunningLights(); 
  }
}
}
